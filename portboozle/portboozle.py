#!/usr/bin/python

import threading, socket, optparse, sys, json, signal, os, gzip
from queue import Queue


medium = {80, 443, 8000, 8080, 8443}
large = {80, 81, 443, 591, 2082, 2087, 2095, 2096, 3000, 8000, 8001, 8008, 8080, 8083, 8443, 8834, 8888}
huge = {80, 81, 300, 443, 591, 593, 832, 981, 1010, 1311, 2082, 2087, 2095, 2096, 2480, 3000, 3128, 3333, 4243, 4567, 4711, 4712, 4993, 5000, 5104, 5108, 5800, 6543, 7000, 7396, 7474, 8000, 8001, 8008, 8014, 8042, 8069, 8080, 8081, 8088, 8090, 8091, 8118, 8123, 8172, 8222, 8243, 8280, 8281, 8333, 8443, 8500, 8834, 8880, 8888, 8983, 9000, 9043, 9060, 9080, 9090, 9091, 9200, 9443, 9800, 9981, 12443, 16080, 18091, 18092, 20720, 28017}
massive = {}

parser = optparse.OptionParser('cat massdns_output | portboozle.py -p <portlist>')
parser.add_option('-p', '--ports', dest='ports', type='string', help='Specify target port[s] seperated by comma or just do 1-65535 or medium or large or huge or massive ')
parser.add_option('-t', '--threads', dest='threads', type='int', help='Specify number of threads default is 100', default=100)
parser.add_option('-o', '--output', dest='output', type='string', help='Output JSON location', default='')
parser.add_option('-s', '--timeout', dest='timeout', type='float', help='Socket timeout for port scanning default is 0.7', default='0.7')
parser.add_option('-d', '--dump', dest='dump', type='string', help='Path to .portboozle.dump', default=sys.path[0] + '/' + '.portboozle.dump')
(options, args) = parser.parse_args()


thread_lock = threading.Lock()
global_count = 0  # Will be incremented after each port is done scanning
global_total_count = 0  # Total size of queue


def create_portlist():
    if 'massive' in options.ports:
        return massive
    elif 'huge' in options.ports:
        return huge
    elif 'large' in options.ports:
        return large
    elif 'medium' in options.ports:
        return medium

    newset = set()
    raw = options.ports.split(',')
    for x in raw:
        if '-' in x:
            (start, stop) = x.split('-')
            newset.update(range(int(start), int(stop) + 1))
        else:
            newset.add(int(x))
    return newset


def extract_target():
    '''
    0000028.example.com. a 235.49.239.47
    0000028.example.com. a 87.140.150.81
    000245000.example.com. a 235.49.239.47
    000245000.example.com. a 87.140.150.81
    001-kz.example.com. a 235.49.239.47
    '''
    myset = set()
    for line in sys.stdin:
        if (line) and (not line.isspace()):
            (hostname, record_type, ip) = line.split()
            if record_type.lower() != 'a':
                continue
            
            hostname = hostname.strip('.\n')
            ip = ip.strip('.\n')
            
            myset.add(ip)
            
            while True:
                try:
                    if hostname not in reference_back[ip]["hosts"]:
                        reference_back[ip]["hosts"].append(hostname)
                    break
                except KeyError:
                    reference_back[ip] = {
                        "hosts": [],
                        "ports": []
                    }
    return myset


def handle_signal(signum, y):
    # If you press CTRL + C
    with thread_lock:
        if options.output:
            with gzip.open(options.dump, 'wb') as fp:
                fp.write(
                    json.dumps({
                        "cmd": ' '.join(sys.argv),
                        "timeout": options.timeout,
                        "threads": options.threads,
                        "output": options.output,
                        "global_count": global_count,
                        "global_total_count": global_total_count,
                        "reference_back": reference_back,
                        "q": list(q.queue)            
                    }).encode()
                )
            print("State saved in", options.dump, file=sys.stderr)
    sys.exit()


def portscan(ip, port):
    global global_count, global_total_count
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(options.timeout)
    try:
        # Below function needs to be called wheter we manage to connect to the port or not it's a progress bar
        with thread_lock:
            global_count += 1
            print(' [{:.2%}] Scanning {}/{}'.format(global_count/global_total_count, global_count, global_total_count), file=sys.stderr, end='\r')

        con = s.connect((ip, port))
        # If no exception we are connected and found an open port
        with thread_lock:
            print(ip + ' | ' + str(port) + ' |', *reference_back[ip]["hosts"])
            if options.output:
                reference_back[ip]["ports"].append(port)
        con.close()
    except Exception as e:
        pass


def threader():
    while True:
        task = q.get()
        portscan(*task)
        q.task_done()


signal.signal(signal.SIGINT, handle_signal)  # When you recive KeyboardInterrupt
signal.signal(signal.SIGTERM, handle_signal)  # When OS Shutsdown


try:
    # Hopefully we were able to save dump
    with gzip.open(options.dump, 'rb') as fp:
        dump = json.loads(fp.read().decode())
    print("Found state file at", options.dump, "discarding the arguments", file=sys.stderr)
    # Restoring global variables
    options.timeout = dump["timeout"]
    options.threads = dump["threads"]
    options.output = dump["output"]
    global_count = dump["global_count"]
    global_total_count = dump["global_total_count"]
    reference_back = dump['reference_back']
    # Putting items back in queue
    q = Queue()
    [q.put(x) for x in dump['q']]
    # Now that we've loaded these things into memory lets go ahead and delete them
    os.remove(options.dump)
except IOError:
    # When dump file doesn't exist, it's a fresh start
    reference_back = {}
    q = Queue()
    for ipAddress in extract_target():
        for aport in create_portlist():
            q.put((ipAddress, aport))
            global_total_count += 1


for x in range(options.threads):
    t = threading.Thread(target=threader)
    t.daemon = True
    t.start()

q.join()

if options.output:
    json.dump(reference_back, open(options.output, 'w'), indent=4)
